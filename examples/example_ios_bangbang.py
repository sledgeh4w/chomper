import logging
import os
import urllib.request
from pathlib import Path

from chomper import Chomper
from chomper.const import ARCH_ARM64, OS_IOS
from chomper.objc import ObjC
from chomper.utils import pyobj2nsobj

base_path = os.path.abspath(os.path.dirname(__file__))

log_format = "%(asctime)s - %(name)s - %(levelname)s: %(message)s"
logging.basicConfig(
    format=log_format,
    level=logging.INFO,
)

logger = logging.getLogger()


def download_sample_file(binary_path: str) -> str:
    filepath = os.path.join(base_path, "..", binary_path)

    path = Path(filepath).resolve()
    if path.exists():
        return filepath

    if not path.parent.exists():
        path.parent.mkdir(parents=True)

    url = "https://sourceforge.net/projects/chomper-emu/files/%s/download" % binary_path

    print(f"Downloading sample file: {url}")
    urllib.request.urlretrieve(url, path)
    return filepath


def main():
    binary_path = "examples/binaries/ios/com.ceair.b2m/ceair_iOS_branch"

    # Download sample file from SourceForge
    download_sample_file(binary_path)
    download_sample_file(f"{binary_path}/../Info.plist")

    emu = Chomper(
        arch=ARCH_ARM64,
        os_type=OS_IOS,
        rootfs_path=os.path.join(base_path, "../rootfs/ios"),
        enable_ui_kit=True,
    )
    objc = ObjC(emu)

    emu.load_module(os.path.join(base_path, "..", binary_path))

    with objc.autorelease_pool():
        # Encrypt
        encrypt_input = pyobj2nsobj(emu, 'S{"osVersion":"14.2.1","os":"iOS","deviceModel":"iPhone","channelNo":"APPSTORE"}')
        encrypt_result = objc.msg_send("BangSafeSDK", "checkcode:dataStyle:", encrypt_input, 2)
        encrypt_result_str = emu.read_string(objc.msg_send(encrypt_result, "cStringUsingEncoding:", 4))

        logger.info("Encrypt result: %s", encrypt_result_str)

        # Decrypt
        decrypt_input = pyobj2nsobj(emu, "")
        decrypt_result = objc.msg_send("BangSafeSDK", "decheckcode:", decrypt_input)
        decrypt_result_str = emu.read_string(objc.msg_send(decrypt_result, "cStringUsingEncoding:", 4))

        logger.info("Decrypt result: %s", decrypt_result_str)


if __name__ == "__main__":
    main()
